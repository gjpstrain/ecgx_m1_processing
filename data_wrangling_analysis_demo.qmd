---
title: "data_wrangling_analysis_demo"
format: html
editor: source

execute: 
  echo: false
  warning: false
  message: false
  include: false
---

```{r}
#| label: setup

library(tidyverse)
library(conflicted)
library(buildmer)
library(GLMMadaptive)
library(ggdist)
library(ggpubr)
library(emmeans)

conflicts_prefer(dplyr::select(), dplyr::filter(), lme4::lmer())

m1_ST <- read_csv("exp_data/ECG_X_EXP1_m1_anon_ST.csv") %>%
  mutate(grand_condition = "ST")

m1_JT <- read_csv("exp_data/ECG_X_EXP1_m1_anon_JT.csv") %>%
  mutate(grand_condition = "JT")


m1_STJ <- read_csv("exp_data/ECG_X_EXP1_m1_anon_STJ.csv") %>%
  mutate(grand_condition = "STJ")

```

```{r}
#| label: wrangle-data

wrangle_data <- function(anon_file) {
  
  # extract demographics
  
  demographics <- anon_file %>%
    filter(!is.na(gender_slider.response)) %>%
    select(matches(c("participant",
                     "age_textbox.text",
                     "gender_slider.response")))
  
  if ("total_correct" %in% colnames(anon_file)) {
  
  total_correct <- anon_file %>%
    filter(!is.na(total_correct)) %>%
    select(c("participant", "total_correct"))
  
  }
  # ignore time taken for now
  
#time_taken <- anon_file %>%
#  filter(!is.na(final.stopped)) %>%
#  select(c("participant", "final.stopped"))

  anon_file %>%
    select(c("participant",
             "image_path",
             "S_button.numClicks",
             "S_button.timesOn",
             "NS_button.numClicks",
             "NS_button.timesOn",
             "exp_trials_loop.thisN",
             "unique_item_no",
             "answer",
             "grand_condition")) %>%
    mutate(item = image_path) %>%
    mutate(image_path = str_replace(image_path, ".*/", ""),
           image_path = str_remove(image_path, "\\.png$")) %>%
    separate(image_path, sep = "_",
             into = c("vis_condition", "subj", "lead", NA, NA, "ST_condition")) %>%
    mutate(vis_condition = case_when(
      vis_condition %in% c("J", "JT", "JTI", "ST", "STJ") ~ "vis",
      TRUE ~ vis_condition
      )) %>%
    mutate(ST_condition = recode(ST_condition,
                                 NOST = "nst")) %>%
    rename(STEMI_button_click = S_button.numClicks,
           NSTEMI_button_click = NS_button.numClicks,
           STEMI_button_RT = S_button.timesOn,
           NSTEMI_button_RT = NS_button.timesOn,
           trial_no = exp_trials_loop.thisN) %>%
    filter(unique_item_no < 121) %>%
    full_join(demographics, by = "participant") %>%
    when("total_correct" %in% colnames(anon_file) ~ full_join(., total_correct, by = "participant"),
         ~ .) %>%
    mutate(across(everything(), ~ gsub("\\[|\\]", "", .))) %>%
    mutate(across(ends_with("RT"), as.double)) %>%
    mutate(
      STEMI_button_click_new = ifelse(STEMI_button_click == 1, "ST", NA),
      NSTEMI_button_click_new = ifelse(NSTEMI_button_click == 1, "N_ST", NA)
    ) %>%
    unite("participant_answer", 
          STEMI_button_click_new,
          NSTEMI_button_click_new, sep = ",", na.rm = T) %>%
    unite("reaction_time",
          STEMI_button_RT,
          NSTEMI_button_RT, na.rm = T) %>%
    mutate(correct = participant_answer == answer) %>%
    
    mutate(reaction_time = as.numeric(reaction_time)) %>%
    assign(paste0(unique(anon_file$expName), "_tidy"),
           value = ., envir = .GlobalEnv)
}

wrangle_data(m1_JT)
wrangle_data(m1_ST)
wrangle_data(m1_STJ)

# create combined dataframe for later analysis 

combined_df <- rbind(ECG_X_EXP1_m1_JT_tidy,
                     ECG_X_EXP1_m1_ST_tidy,
                     ECG_X_EXP1_m1_STJ_tidy)
```

```{r}
#| label: plot-bars
#| include: true
#| out-width: 200%

# take a look at some descriptive statistics

plot_bars <- function (df, title) {

df %>%
  mutate(correct = participant_answer == answer) %>%
  group_by(vis_condition,ST_condition) %>%
  summarise(percent_correct = mean(correct) * 100,
            sd_correct = sd(correct),
            mean_RT = mean(reaction_time),
            sd_RT = sd(reaction_time),
            total_exp_correct = sum(correct)) %>%
  ggplot(aes(x = interaction(vis_condition,ST_condition),
             y = percent_correct,
             fill = interaction(vis_condition,ST_condition))) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_errorbar(aes(ymin = percent_correct - sd_correct, ymax = percent_correct + sd_correct),
                position = position_dodge(0.9), width = 0.3) +
  geom_text(aes(label = round(percent_correct)), vjust = 2) +
  coord_cartesian(ylim = c(20,100)) +
  scale_y_continuous(labels = function(x) paste0(x, "%")) +
  theme_ggdist() +
  labs(y = "% Correct",
       title = title) +
  theme(legend.position = "none",
        axis.title.x = element_blank())

}

ggarrange(plot_bars(ECG_X_EXP1_m1_JT_tidy, "JT"),
          plot_bars(ECG_X_EXP1_m1_ST_tidy, "ST"),
          plot_bars(ECG_X_EXP1_m1_STJ_tidy, "STJ"),
          ncol = 3)
```

```{r}
# first, check whether there is an effect of ST/NST

st_nst_model <- buildmer(correct ~ ST_condition +
                           (1 + ST_condition | participant) +
                           (1 + ST_condition | item),
                         data = combined_df,
                         family = binomial)

# no significant effect of ST vs NST on performance
```

```{r}

# then, check vis vs nvis

vis_nvis_model <- buildmer(correct ~ vis_condition +
                           (1 + vis_condition | participant) +
                           (1 + vis_condition | item),
                         data = combined_df,
                         family = binomial)

vis_nvis_em_model <- vis_nvis_model@model

emmeans(vis_nvis_em_model, pairwise ~ vis_condition)

# significant effect of visualisation presence on performance

```

```{r}
# next, for visualisation conditions, see if there is an effect of vis type

vis_type_df <- combined_df %>% filter(vis_condition == "vis")

vis_type_model <- buildmer(correct ~ grand_condition +
                           (1 + grand_condition | participant) +
                           (1 + grand_condition | item),
                         data = vis_type_df,
                         family = binomial)

vis_type_em_model <- vis_type_model@model

emmeans(vis_type_em_model, pairwise ~ grand_condition)

# no significant differences between vis types when taking into account NST and ST
```

```{r}
# check for potential interaction with NST/ST

vis_type__interact_model <- buildmer(correct ~ grand_condition * ST_condition +
                           (1 + grand_condition | participant) +
                           (1 + grand_condition | item),
                         data = vis_type_df,
                         family = binomial)

vis_type_interact_em_model <- vis_type__interact_model@model

emm <-emmeans(vis_type_interact_em_model, pairwise ~ grand_condition:ST_condition)

summary(emm, type = "response")

# significant effect of both vis_type and ST condition when taking both into account
# interaction present

# JT better with NST
# ShadeT better with ST
# STJ better with ST
```


